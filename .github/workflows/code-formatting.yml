name: Create a PR with clang-format changes

on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Install clang format
      run: |
        sudo apt install -y clang-format-8
    - name: Run clang format
      run: |
        set -x
        # We need to fetch the other commit.
        git fetch --depth=1 origin ${{ github.event.pull_request.base.ref }}
        
        BASE_COMMIT=${{ github.event.pull_request.base.sha }}
        echo "Running clang-format-8 against branch ${{ github.event.pull_request.base.ref }} , with hash ${{ github.event.pull_request.base.sha }}"
        COMMIT_FILES=$(git diff --name-only $BASE_COMMIT | grep -ivE 'LinkDef|Utilities/PCG/')
        RESULT_OUTPUT="$(git-clang-format-8 --commit $BASE_COMMIT --diff --binary `which clang-format-8` $COMMIT_FILES)"

        for x in $COMMIT_FILES; do
          case $x in
            *.h|*.cxx)
              # We remove the header from the diff as it contains +++ then
              # we only select the added lines to check for the long ones.
              # We do not need to check for the lines which have been removed
              # and we do not want to check for the lines which were not changed
              # to avoid extra work.
              # 120 characters are allowed, meaning the error should start with 122,
              # to allow for the starting + at the end of the line.
              git diff $x | tail -n +5 | grep -e '^+' | grep '.\{122,\}' && { echo "Line longer than 120 chars in $x." && exit 1; } || true ;;
            *.hxx|*.cc|*.hpp) echo "$x uses non-allowed extension." && exit 1 ;;
            *) ;;
          esac
        done

        if [ "$RESULT_OUTPUT" == "no modified files to format" ] \
          || [ "$RESULT_OUTPUT" == "clang-format did not modify any files" ] ; then
          echo "clang-format passed."
          git push --set-upstream origin :alibot-cleanup-${{ github.event.pull_request.number }} -f
          cat << EOF
          ::set-output name=clean::true
          EOF
        else
          echo "clang-format failed."
          echo "To reproduce it locally please run"
          echo -e "\tgit checkout $TRAVIS_BRANCH"
          echo -e "\tgit-clang-format --commit $BASE_COMMIT --diff --binary $(which clang-format)"
          echo "$RESULT_OUTPUT"
          echo "Opening a PR to your branch with the fixes"
          git config --global user.email "alibuild@cern.ch"
          git config --global user.name "ALICE Action Bot"
          git commit -m "Please consider the following formatting changes" -a
          git show
          git push --set-upstream origin alibot-cleanup-${{ github.event.pull_request.number }} -f
          cat << EOF
          ::set-output name=clean::false
          EOF
        fi

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v3
      with:
        commit-message: Please consider the following formatting changes
        committer: alibuild <alibuild@cern.ch>
        branch: alibot-cleanup-${{ github.event.pull_request.number }}
        delete-branch: true
        title: "Please consider the following formatting changes to ${{ github.event.pull_request.number }"
        draft: false

    - name: Exit with error if the PR is not clean
      run: |
        case ${{ steps.clang_format.outputs.clean }} in
          true) echo "PR clean" ; exit 0 ;;
          false) echo "PR not clean" ; exit 0 ;;
        esac


