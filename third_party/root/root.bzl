def _dict_add(*dictionaries):
    """Returns a new `dict` that has all the entries of the given dictionaries.
    If the same key is present in more than one of the input dictionaries, the
    last of them in the argument list overrides any earlier ones.
    This function is designed to take zero or one arguments as well as multiple
    dictionaries, so that it follows arithmetic identities and callers can avoid
    special cases for their inputs: the sum of zero dictionaries is the empty
    dictionary, and the sum of a single dictionary is a copy of itself.
    Re-implemented here to avoid adding a dependency on skylib.
    Args:
      *dictionaries: Zero or more dictionaries to be added.
    Returns:
      A new `dict` that has all the entries of the given dictionaries.
    """
    result = {}
    for d in dictionaries:
        result.update(d)
    return result

def expand_cmake_vars(name, src, dst, cmake_vars):
    """Expands #cmakedefine, #cmakedefine01, and CMake variables in a text file.
    Args:
      name: the name of the rule
      src: the input of the rule
      dst: the output of the rule
      cmake_vars: a string containing the CMake variables, as generated by
        cmake_var_string.
    """
    expand_cmake_vars_tool = Label("//third_party/:expand_cmake_vars")
    native.genrule(
        name = name,
        srcs = [src],
        tools = [expand_cmake_vars_tool],
        outs = [dst],
        cmd = ("$(location {}) ".format(expand_cmake_vars_tool) + cmake_vars +
               "< $< > $@"),
    )

def _make_rgitcommit_impl(ctx):
    #tmpfile = ctx.actions.declare_file("gitinfo.txt")
    # FIXME: requires looking up for .git, ignoring for now.
    #result = ctx.actions.run_shell(command = "sh -ex " + ctx.file.gitinfo.path,
    #                         arguments = ["."],
    #                         tools = [ctx.file.gitinfo],
    #                         outputs = [tmpfile],
    #                         inputs = [],
    #                         env = {
    #                            "OUT": "gitinfo.txt"
    #                         },
    #                         progress_message = "Gatherin git info"
    #                         )
    result = ctx.actions.run_shell(command = "%s %s" % ( ctx.file.githeader.path, ctx.outputs.RGitCommit.path),
                             arguments = [],
                             inputs = [],
                             outputs = [ctx.outputs.RGitCommit],
                             tools = [ctx.file.githeader],
                             progress_message = "Creating RGitCommit.h"
                             )

make_rgit_commit = rule(implementation = _make_rgitcommit_impl,
                        attrs = {
                          "githeader": attr.label(
                            default = Label("@root//:build/unix/githeader.sh"),
                            allow_single_file = True,
                            executable = True,
                            cfg = "host"
                          ),
                          "gitinfo": attr.label(
                            default = Label("@root//:build/unix/gitinfo.sh"),
                            allow_single_file = True,
                            executable = True,
                            cfg = "host"
                          ),
                          "gitinfo_txt": attr.label(
                            default = Label("@root//:etc/gitinfo.txt"),
                            allow_single_file = True,
                            executable = True,
                            cfg = "host"
                          ),
                        },
                        outputs = {"RGitCommit": "RGitCommit.h"},
                        )

# Hardcode this on mac for the moment.
COMPILE_DATA = """
#define CLING_CXX_INCL "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1"
#define CLING_INCLUDE_PATHS ""
  
#define CLING_OSX_SYSROOT "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk"

#define CLING_CXX_RLTV "clang++  -O2 -DNDEBUG"
"""

def cling_compiledata_rule_impl(ctx):
  ctx.file_action(
      content = COMPILE_DATA,
      output = ctx.outputs.out,
      executable = False,
  )

cling_compiledata_rule = rule(
    attrs = {
        "out": attr.output(mandatory = True),
    },
    # output_to_genfiles is required for header files.
    output_to_genfiles = True,
    implementation = cling_compiledata_rule_impl,
)
